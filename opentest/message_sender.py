import json

import requests
from jinja2 import Template
from lxml import etree
from requests.exceptions import SSLError

GP_SUMMARY_UPLOAD = 'gp_summary_upload'
GET_NHS_NUMBER = 'get_nhs_number'

POST = 'POST'
GET = 'GET'


def make_request(interaction_name, message_id, asid):
    # load interactions config file
    with open('interactions.json') as interactions_file:
        interactions = json.loads(interactions_file.read())

    # ensure requested interaction config entry exists
    interation_details = interactions.get(interaction_name)
    if not interation_details:
        raise Exception('unknown interaction: {}'.format(interaction_name))

    # build request from interaction config
    url = 'https://msg.opentest.hscic.gov.uk/{}'.format(interation_details['url'])
    interaction_message_filename = 'message_templates/{}'.format(interation_details['message_filename'])
    headers = {'type': interation_details['type'],
               'Content-Type': interation_details['content_type'],
               'charset': interation_details['charset'],
               'SOAPAction': interation_details['soap_action'],
               'start': interation_details['start']}

    try:
        has_ebxml_wrapper = interation_details['ebxml_wrapper_required']
        if has_ebxml_wrapper:
            # Read in the message template
            with open(interaction_message_filename) as message_temple:
                rendered_message = message_temple.read()

            context = {
                'message_id': message_id,
                'interaction_message': rendered_message
            }

            # inject the message ID and message template into the ebxml wrapper
            ebxml_wrapper_filename = 'message_templates/{}'.format('ebxml_wrapper.xml')
            with open(ebxml_wrapper_filename) as ebxml_message_template:
                template = Template(ebxml_message_template.read())
                message = template.render(context)
        else:
            context = {
                'message_id': message_id,
                'asid': asid
            }

            # inject the message ID and ASID
            with open(interaction_message_filename) as message_template:
                template = Template(message_template.read())
                message = template.render(context)

        # make the request
        if interation_details['request_type'] == POST:
            response = requests.post(url,
                                     data=message,
                                     headers=headers,
                                     cert=('certs/client.cert', 'certs/client.key'),
                                     verify='certs/client.pem')
        elif interation_details['request_type'] == GET:
            response = requests.get(url,
                                    data=message,
                                    headers=headers,
                                    cert=('certs/client.cert', 'certs/client.key'),
                                    verify='certs/client.pem')

        print('Status Code: {}'.format(response.status_code))
        print('Message Response:')
        print(etree.tostring(etree.fromstring(response.content), pretty_print=True).decode())
    except SSLError as se:
        print(repr(se))
    except Exception as e:
        print(repr(e))

if __name__ == "__main__":
    asid = '<REPLACE_ME>'
    gp_message_id = '<REPLACE_ME>'
    get_nhs_number_message_id = '<REPLACE_ME>'

    # make_request(GP_SUMMARY_UPLOAD, gp_message_id, asid)
    # make_request(GET_NHS_NUMBER, get_nhs_number_message_id, asid)
